{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Attachment.svelte",
    "..\\..\\Photo.svelte",
    "..\\..\\Post.svelte",
    "..\\..\\PostLink.svelte",
    "..\\..\\Video.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Feed from './components/Feed.svelte';\n    import { login, logout, getIsLoggedIn } from './vk/auth';\n    import { getNews } from './vk/data/news';\n\n    let error;\n    let isLoggedIn;\n    let news;\n\n    (async () => {\n        try {\n            isLoggedIn = await getIsLoggedIn();\n            if (isLoggedIn) {\n                news = await getNews();\n            }\n        } catch (e) {\n            error = e;\n        }\n    })();\n\n    async function handleLogoutClick() {\n        if (!confirm('Are you sure?')) {\n            return;\n        }\n\n        await logout();\n        isLoggedIn = false;\n        news = undefined;\n        localStorage.clear();\n    }\n\n    async function handleLoginClick() {\n        try {\n            isLoggedIn = await login();\n            if (isLoggedIn) {\n                news = await getNews();\n            }\n        } catch (e) {\n            error = e;\n        }\n    }\n\n    let readNewsCount = 0;\n    function updateReadCount() {\n        readNewsCount = news.filter((n) => n.seen).length;\n    }\n\n    async function markAllAsReadAndRefresh() {\n        news.forEach((n) => {\n            n.markSeen();\n        });\n        refresh();\n    }\n\n    async function refresh() {\n        window.scrollTo(0, 0);\n        news = undefined;\n        news = await getNews();\n        updateReadCount();\n    }\n</script>\n\n<!-- prettier-ignore -->\n<nav>\n    {#if news}\n        <span class=\"read-counter\">\n            {readNewsCount}/{news.length}\n        </span>\n    {/if}\n    {#if isLoggedIn}\n        <button on:click={handleLogoutClick} id=\"logout\">Logout</button>\n    {/if}\n</nav>\n<!-- prettier-ignore -->\n<main>\n    {#if isLoggedIn === false}\n        <p class=\"centered\">\n            <button on:click={handleLoginClick}>Log in with VK</button>\n        </p>\n    {:else if news}\n        {#if news.length > 0}\n            <Feed posts={news} onPostRead={updateReadCount}></Feed>\n        {:else}\n            <p class=\"centered\">There's nothing new in your feed! Well done!</p>\n        {/if}\n        <p class=\"centered\">\n            <button on:click={markAllAsReadAndRefresh} class=\"refresh-button\">Refresh</button>\n        </p>\n    {:else if error}\n        <p class=\"centered\" style=\"color: red;\">{error.message}</p>\n    {:else}\n        <p class=\"centered\">Loading...</p>\n    {/if}\n</main>\n\n<style>\n    nav {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-end;\n        align-items: center;\n\n        background-color: #68a5eb;\n        height: 42px;\n\n        position: fixed;\n        left: 0;\n        right: 0;\n        top: 0;\n        z-index: 1;\n    }\n    .read-counter {\n        color: #fff;\n        margin-left: 24px;\n        margin-right: auto;\n    }\n    main {\n        margin: 42px auto 0;\n        padding: 8px;\n        max-width: 500px;\n    }\n    #logout {\n        margin: 0;\n        margin-right: 8px;\n        font-size: 12px;\n    }\n    .centered {\n        text-align: center;\n    }\n    .refresh-button {\n        letter-spacing: 2px;\n        width: 100%;\n        margin: 0.5em 0;\n    }\n</style>\n",
    "<script>\n    import PostLink from './PostLink.svelte';\n    import Photo from './Photo.svelte';\n    import Video from './Video.svelte';\n    export let att;\n</script>\n\n<!-- prettier-ignore -->\n<div>\n    {#if att.type === 'photo'}\n        <Photo photo={att.photo}></Photo>\n    {:else if att.type === 'video'}\n        <span>Video frame:</span>\n        <Photo photo={att.video}></Photo>\n    {:else if att.type === 'doc' && att.doc.ext === 'gif'}\n        <Video {att}></Video>\n    {:else if att.type === 'doc' && att.doc.ext === 'pdf'}\n        <p>Doc: {att.doc.title}</p>\n    {:else if att.type === 'link'}\n        <PostLink {att}></PostLink>\n    {:else if att.type === 'podcast'}\n        <p>Podcast: {att.podcast.title}</p>\n    {:else if att.type === 'podcast'}\n        <p>Unsupported attachment: {JSON.stringify(att)}</p>\n    {/if}\n</div>\n\n<style>\n    p,\n    span {\n        word-break: break-word;\n        max-width: 100%;\n        font-style: italic;\n    }\n</style>\n",
    "<script>\n    import { selectPhoto } from '../utils/selectPhoto';\n\n    export let photo;\n\n    const photoSrc = selectPhoto(photo, 600);\n</script>\n\n<style>\n    img {\n        width: 100%;\n    }\n</style>\n\n<!-- prettier-ignore -->\n<img loading=\"lazy\" src={photoSrc} alt=\"\" srcset=\"\" />\n",
    "<script>\n    import { onMount, onDestroy } from 'svelte';\n    import Attachment from './Attachment.svelte';\n\n    export let post;\n    export let observer;\n\n    const { postUrl, date, repost, sourceName, text, attachments, uid } = post;\n\n    let container;\n    onMount(() => {\n        if (!observer) return;\n        observer.observe(container);\n    });\n    onDestroy(() => {\n        if (!observer) return;\n        observer.unobserve(container);\n    });\n</script>\n\n<!-- prettier-ignore -->\n<div \n    bind:this={container} \n    class=\"post\"\n    class:seen={post.seen} \n    data-post-uid={uid}\n>\n    <p class=\"date\">{date}</p>\n    <h4>{sourceName}</h4>\n    {#if text}\n        <p class=\"text\">{text}</p>\n    {/if}\n    {#if attachments}\n        {#each attachments as att, i}\n           <Attachment {att}></Attachment>\n        {/each}\n    {/if}\n    {#if repost}\n        <div class=\"post\">\n            <p class=\"date\">{repost.date}</p>\n            <h4>{repost.sourceName}</h4>\n            {#if repost.text}\n                <p class=\"text\">{repost.text}</p>\n            {/if}\n            {#if repost.attachments}\n                {#each repost.attachments as att, i}\n                    <Attachment {att}></Attachment>\n                {/each}\n            {/if}\n        </div>\n    {/if}\n    <p><a href={postUrl} target=\"_blank\">{postUrl}</a></p>\n</div>\n\n<style>\n    .post {\n        padding: 1em;\n        margin-bottom: 0.5em;\n        position: relative;\n        box-shadow: 0 0 3px rgb(128, 128, 128);\n    }\n    .text {\n        white-space: pre-wrap;\n        word-break: break-word;\n    }\n    .date {\n        color: #505050;\n        position: absolute;\n        top: 0.5em;\n        right: 0.5em;\n        font-size: 0.75em;\n        margin: 0;\n    }\n    .seen {\n        opacity: 0.5;\n    }\n</style>\n",
    "<script>\n    export let att;\n\n    let photoSrc;\n    if (att.link.photo) {\n        const photoSizes = Object.keys(att.link.photo).filter((k) =>\n            k.includes('photo')\n        );\n\n        // fixme replace with screensize based size\n        const medianQuality = Math.floor(photoSizes.length / 2);\n        photoSrc = att.link.photo[photoSizes[medianQuality]];\n    }\n</script>\n\n<!-- prettier-ignore -->\n<a href=\"{att.link.url}\" target=\"_blank\">\n    <div class=\"link\">\n        {#if photoSrc}\n            <img loading=\"lazy\" src=\"{photoSrc}\" alt=\"\" />\n        {/if}\n        <p>{att.link.title}</p>\n    </div>\n</a>\n\n<style>\n    img {\n        width: 100%;\n    }\n    .link {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        border: 1px solid rgba(0, 0, 0, 0.363);\n    }\n    .link img {\n        flex-shrink: 0;\n        height: 80px;\n        width: auto;\n    }\n    .link p {\n        margin: 0;\n        padding: 8px;\n    }\n</style>\n",
    "<script>\n    export let att;\n\n    // fixme choose poster based on screen size\n    const posterSrc = att.doc.preview.photo.sizes[0].src;\n    const videoSrc =\n        (att.doc.preview.video && att.doc.preview.video.src) || att.doc.url;\n</script>\n\n<style>\n    video {\n        width: 100%;\n    }\n</style>\n\n<!-- prettier-ignore -->\n<video\n    src=\"{videoSrc}\"\n    poster=\"{posterSrc}\"\n    preload=\"none\"\n    controls\n    type=\"video/mp4\"\n/>\n"
  ],
  "names": [],
  "mappings": "AAgGI,GAAG,eAAC,CAAC,AACD,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,QAAQ,CACzB,WAAW,CAAE,MAAM,CAEnB,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,IAAI,CAEZ,QAAQ,CAAE,KAAK,CACf,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,GAAG,CAAE,CAAC,CACN,OAAO,CAAE,CAAC,AACd,CAAC,AACD,aAAa,eAAC,CAAC,AACX,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACtB,CAAC,AACD,IAAI,eAAC,CAAC,AACF,MAAM,CAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CACnB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,AACpB,CAAC,AACD,OAAO,eAAC,CAAC,AACL,MAAM,CAAE,CAAC,CACT,YAAY,CAAE,GAAG,CACjB,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,SAAS,eAAC,CAAC,AACP,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,eAAe,eAAC,CAAC,AACb,cAAc,CAAE,GAAG,CACnB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CAAC,CAAC,AACnB,CAAC;ACzGD,eAAC,CACD,IAAI,cAAC,CAAC,AACF,UAAU,CAAE,UAAU,CACtB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,AACtB,CAAC;ACxBD,GAAG,aAAC,CAAC,AACD,KAAK,CAAE,IAAI,AACf,CAAC;AC4CD,KAAK,cAAC,CAAC,AACH,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,KAAK,CACpB,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC1C,CAAC,AACD,KAAK,cAAC,CAAC,AACH,WAAW,CAAE,QAAQ,CACrB,UAAU,CAAE,UAAU,AAC1B,CAAC,AACD,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,CAAC,AACb,CAAC,AACD,KAAK,cAAC,CAAC,AACH,OAAO,CAAE,GAAG,AAChB,CAAC;ACjDD,GAAG,4BAAC,CAAC,AACD,KAAK,CAAE,IAAI,AACf,CAAC,AACD,KAAK,4BAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,AAC1C,CAAC,AACD,mBAAK,CAAC,GAAG,cAAC,CAAC,AACP,WAAW,CAAE,CAAC,CACd,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACf,CAAC,AACD,mBAAK,CAAC,CAAC,cAAC,CAAC,AACL,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,GAAG,AAChB,CAAC;ACjCD,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,AACf,CAAC"
}